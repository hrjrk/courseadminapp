{"ast":null,"code":"import { EventEmitter } from 'events';\nimport Dispatcher from '../appDispatcher';\nimport actionTypes from '../actions/actionTypes';\nconst CHANGE_EVENT = \"change\"; // noy global as only 1 thing is exported below\n\nlet _authors = [];\n\nclass AuthorStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getAuthors() {\n    return _authors;\n  }\n\n  getAuthorBySlug(slug) {\n    return _authors.find(author => author.name === slug);\n  }\n\n}\n\nconst store = new AuthorStore();\nDispatcher.register(action => {\n  debugger;\n\n  switch (action.actionType) {\n    case actionTypes.CREATE_AUTHOR:\n      _authors.push(action.author);\n\n      store.emitChange();\n      break;\n\n    case actionTypes.LOAD_AUTHORS:\n      _authors = action.authors;\n      store.emitChange();\n      break;\n\n    case actionTypes.DELETE_AUTHOR:\n      _authors = _authors.filter(author => author.id !== parseInt(action.id, 10));\n      store.emitChange();\n      break;\n\n    default: //nothing to do here\n\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/hv055937/Library/MyWorkspace/myprojects/courseadminapp/src/stores/authorStore.js"],"names":["EventEmitter","Dispatcher","actionTypes","CHANGE_EVENT","_authors","AuthorStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getAuthors","getAuthorBySlug","slug","find","author","name","store","register","action","actionType","CREATE_AUTHOR","push","LOAD_AUTHORS","authors","DELETE_AUTHOR","filter","id","parseInt"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,QAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,YAAY,GAAG,QAArB,C,CAA+B;;AAC/B,IAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAMC,WAAN,SAA0BL,YAA1B,CAAsC;AAElCM,EAAAA,iBAAiB,CAACC,QAAD,EAAU;AACvB,SAAKC,EAAL,CAAQL,YAAR,EAAsBI,QAAtB;AACH;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAU;AAC1B,SAAKG,cAAL,CAAoBP,YAApB,EAAkCI,QAAlC;AACH;;AAEDI,EAAAA,UAAU,GAAG;AACT,SAAKC,IAAL,CAAUT,YAAV;AACH;;AAEDU,EAAAA,UAAU,GAAG;AACT,WAAOT,QAAP;AACH;;AAEDU,EAAAA,eAAe,CAACC,IAAD,EAAO;AAClB,WAAOX,QAAQ,CAACY,IAAT,CAAcC,MAAM,IAAIA,MAAM,CAACC,IAAP,KAAgBH,IAAxC,CAAP;AACH;;AApBiC;;AAuBtC,MAAMI,KAAK,GAAG,IAAId,WAAJ,EAAd;AACAJ,UAAU,CAACmB,QAAX,CAAoBC,MAAM,IAAI;AAC1B;;AACA,UAAQA,MAAM,CAACC,UAAf;AAEI,SAAKpB,WAAW,CAACqB,aAAjB;AACInB,MAAAA,QAAQ,CAACoB,IAAT,CAAcH,MAAM,CAACJ,MAArB;;AACAE,MAAAA,KAAK,CAACR,UAAN;AACA;;AAEJ,SAAKT,WAAW,CAACuB,YAAjB;AACIrB,MAAAA,QAAQ,GAAGiB,MAAM,CAACK,OAAlB;AACAP,MAAAA,KAAK,CAACR,UAAN;AACA;;AAEJ,SAAKT,WAAW,CAACyB,aAAjB;AACIvB,MAAAA,QAAQ,GAAGA,QAAQ,CAACwB,MAAT,CAAiBX,MAAM,IAAIA,MAAM,CAACY,EAAP,KAAcC,QAAQ,CAACT,MAAM,CAACQ,EAAR,EAAY,EAAZ,CAAjD,CAAX;AAEAV,MAAAA,KAAK,CAACR,UAAN;AACA;;AAEJ,YAlBJ,CAmBI;;AAnBJ;AAqBH,CAvBD;AAyBA,eAAeQ,KAAf","sourcesContent":["import {EventEmitter} from 'events';\nimport Dispatcher from '../appDispatcher';\nimport actionTypes from '../actions/actionTypes';\n\nconst CHANGE_EVENT = \"change\"; // noy global as only 1 thing is exported below\nlet _authors = [];\n\nclass AuthorStore extends EventEmitter{\n\n    addChangeListener(callback){\n        this.on(CHANGE_EVENT, callback);\n    }\n\n    removeChangeListener(callback){\n        this.removeListener(CHANGE_EVENT, callback);\n    }\n\n    emitChange() {\n        this.emit(CHANGE_EVENT);\n    }\n\n    getAuthors() {\n        return _authors;\n    }\n\n    getAuthorBySlug(slug) {\n        return _authors.find(author => author.name === slug)\n    }\n}\n\nconst store = new AuthorStore();\nDispatcher.register(action => {\n    debugger;\n    switch (action.actionType) {\n\n        case actionTypes.CREATE_AUTHOR:\n            _authors.push(action.author);\n            store.emitChange();\n            break;\n\n        case actionTypes.LOAD_AUTHORS:\n            _authors = action.authors;\n            store.emitChange();\n            break;\n\n        case actionTypes.DELETE_AUTHOR:\n            _authors = _authors.filter( author => author.id !== parseInt(action.id, 10)\n            );\n            store.emitChange();\n            break;\n\n        default:\n        //nothing to do here\n    }\n});\n\nexport default store;"]},"metadata":{},"sourceType":"module"}