{"ast":null,"code":"import { EventEmitter } from 'events';\nimport Dispatcher from '../appDispatcher';\nimport actionTypes from '../actions/actionTypes';\nconst CHANGE_EVENT = \"change\"; // noy global as only 1 thing is exported below\n\nlet _authors = [];\n\nclass AuthorStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getAuthors() {\n    debugger;\n    return _authors;\n  }\n\n}\n\nconst store = new AuthorStore();\nDispatcher.register(action => {\n  debugger;\n\n  switch (action.actionType) {\n    case actionTypes.LOAD_AUTHORS:\n      _authors = action.authors;\n      store.emitChange();\n      break;\n\n    case actionTypes.DELETE_AUTHOR:\n      _authors = _authors.filter(author => author.id !== parseInt(author.id, 10));\n      store.emitChange();\n      break;\n\n    default: //nothing to do here\n\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/hv055937/Library/MyWorkspace/myprojects/courseadminapp/src/stores/authorStore.js"],"names":["EventEmitter","Dispatcher","actionTypes","CHANGE_EVENT","_authors","AuthorStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getAuthors","store","register","action","actionType","LOAD_AUTHORS","authors","DELETE_AUTHOR","filter","author","id","parseInt"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,QAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,YAAY,GAAG,QAArB,C,CAA+B;;AAC/B,IAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAMC,WAAN,SAA0BL,YAA1B,CAAsC;AAElCM,EAAAA,iBAAiB,CAACC,QAAD,EAAU;AACvB,SAAKC,EAAL,CAAQL,YAAR,EAAsBI,QAAtB;AACH;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAU;AAC1B,SAAKG,cAAL,CAAoBP,YAApB,EAAkCI,QAAlC;AACH;;AAEDI,EAAAA,UAAU,GAAG;AACT,SAAKC,IAAL,CAAUT,YAAV;AACH;;AAEDU,EAAAA,UAAU,GAAG;AACT;AACA,WAAOT,QAAP;AACH;;AAjBiC;;AAoBtC,MAAMU,KAAK,GAAG,IAAIT,WAAJ,EAAd;AACAJ,UAAU,CAACc,QAAX,CAAoBC,MAAM,IAAI;AAC1B;;AACA,UAAQA,MAAM,CAACC,UAAf;AACI,SAAKf,WAAW,CAACgB,YAAjB;AACId,MAAAA,QAAQ,GAAGY,MAAM,CAACG,OAAlB;AACAL,MAAAA,KAAK,CAACH,UAAN;AACA;;AAEJ,SAAKT,WAAW,CAACkB,aAAjB;AACIhB,MAAAA,QAAQ,GAAGA,QAAQ,CAACiB,MAAT,CAAiBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcC,QAAQ,CAACF,MAAM,CAACC,EAAR,EAAY,EAAZ,CAAjD,CAAX;AAEAT,MAAAA,KAAK,CAACH,UAAN;AACA;;AAEJ,YAZJ,CAaI;;AAbJ;AAeH,CAjBD;AAmBA,eAAeG,KAAf","sourcesContent":["import {EventEmitter} from 'events';\nimport Dispatcher from '../appDispatcher';\nimport actionTypes from '../actions/actionTypes';\n\nconst CHANGE_EVENT = \"change\"; // noy global as only 1 thing is exported below\nlet _authors = [];\n\nclass AuthorStore extends EventEmitter{\n\n    addChangeListener(callback){\n        this.on(CHANGE_EVENT, callback);\n    }\n\n    removeChangeListener(callback){\n        this.removeListener(CHANGE_EVENT, callback);\n    }\n\n    emitChange() {\n        this.emit(CHANGE_EVENT);\n    }\n\n    getAuthors() {\n        debugger;\n        return _authors;\n    }\n}\n\nconst store = new AuthorStore();\nDispatcher.register(action => {\n    debugger;\n    switch (action.actionType) {\n        case actionTypes.LOAD_AUTHORS:\n            _authors = action.authors;\n            store.emitChange();\n            break;\n\n        case actionTypes.DELETE_AUTHOR:\n            _authors = _authors.filter( author => author.id !== parseInt(author.id, 10)\n            );\n            store.emitChange();\n            break;\n\n        default:\n        //nothing to do here\n    }\n});\n\nexport default store;"]},"metadata":{},"sourceType":"module"}