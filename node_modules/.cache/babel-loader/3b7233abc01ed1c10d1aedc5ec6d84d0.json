{"ast":null,"code":"import { EventEmitter } from 'events';\nimport Dispatcher from '../appDispatcher';\nimport actionTypes from '../actions/actionTypes';\nconst CHANGE_EVENT = \"change\"; // noy global as only 1 thing is exported below\n\nlet _courses = [];\n\nclass CourseStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getCourses() {\n    debugger;\n    return _courses;\n  }\n\n  getCourseBySlug(slug) {\n    return _courses.find(course => course.slug === slug);\n  }\n\n}\n\nconst store = new CourseStore();\nDispatcher.register(action => {\n  debugger;\n\n  switch (action.actionType) {\n    case actionTypes.CREATE_COURSE:\n      _courses.push(action.course);\n\n      store.emitChange();\n      break;\n\n    case actionTypes.UPDATE_COURSE:\n      _courses = _courses.map(course => course.id === action.course.id ? action.course : course);\n      store.emitChange();\n      break;\n\n    case actionTypes.LOAD_COURSES:\n      _courses = action.courses;\n      store.emitChange();\n      break;\n\n    case actionTypes.DELETE_COURSE:\n      _courses = _courses.filter(course => course.id === parseInt(action.id, 10));\n      store.emitChange();\n      break;\n\n    default: //nothing to do here\n\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/hv055937/Library/MyWorkspace/myprojects/courseadminapp/src/stores/courseStore.js"],"names":["EventEmitter","Dispatcher","actionTypes","CHANGE_EVENT","_courses","CourseStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getCourses","getCourseBySlug","slug","find","course","store","register","action","actionType","CREATE_COURSE","push","UPDATE_COURSE","map","id","LOAD_COURSES","courses","DELETE_COURSE","filter","parseInt"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,QAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,YAAY,GAAG,QAArB,C,CAA+B;;AAC/B,IAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAMC,WAAN,SAA0BL,YAA1B,CAAsC;AAErCM,EAAAA,iBAAiB,CAACC,QAAD,EAAU;AACvB,SAAKC,EAAL,CAAQL,YAAR,EAAsBI,QAAtB;AACH;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAU;AAC1B,SAAKG,cAAL,CAAoBP,YAApB,EAAkCI,QAAlC;AACH;;AAEDI,EAAAA,UAAU,GAAG;AACT,SAAKC,IAAL,CAAUT,YAAV;AACH;;AAEDU,EAAAA,UAAU,GAAG;AACT;AACA,WAAOT,QAAP;AACH;;AAEDU,EAAAA,eAAe,CAACC,IAAD,EAAO;AAClB,WAAOX,QAAQ,CAACY,IAAT,CAAcC,MAAM,IAAIA,MAAM,CAACF,IAAP,KAAgBA,IAAxC,CAAP;AACH;;AArBoC;;AAwBtC,MAAMG,KAAK,GAAG,IAAIb,WAAJ,EAAd;AACAJ,UAAU,CAACkB,QAAX,CAAoBC,MAAM,IAAI;AAC1B;;AACA,UAAQA,MAAM,CAACC,UAAf;AACI,SAAKnB,WAAW,CAACoB,aAAjB;AACIlB,MAAAA,QAAQ,CAACmB,IAAT,CAAcH,MAAM,CAACH,MAArB;;AACAC,MAAAA,KAAK,CAACP,UAAN;AACA;;AAEJ,SAAKT,WAAW,CAACsB,aAAjB;AACIpB,MAAAA,QAAQ,GAAGA,QAAQ,CAACqB,GAAT,CAAaR,MAAM,IAC1BA,MAAM,CAACS,EAAP,KAAcN,MAAM,CAACH,MAAP,CAAcS,EAA5B,GAAiCN,MAAM,CAACH,MAAxC,GAAiDA,MAD1C,CAAX;AAGCC,MAAAA,KAAK,CAACP,UAAN;AACA;;AAEL,SAAKT,WAAW,CAACyB,YAAjB;AACKvB,MAAAA,QAAQ,GAAGgB,MAAM,CAACQ,OAAlB;AACAV,MAAAA,KAAK,CAACP,UAAN;AACA;;AAEL,SAAKT,WAAW,CAAC2B,aAAjB;AACKzB,MAAAA,QAAQ,GAAGA,QAAQ,CAAC0B,MAAT,CAAiBb,MAAM,IAAIA,MAAM,CAACS,EAAP,KAAcK,QAAQ,CAACX,MAAM,CAACM,EAAR,EAAY,EAAZ,CAAjD,CAAX;AAEAR,MAAAA,KAAK,CAACP,UAAN;AACA;;AAEL,YAxBJ,CAyBQ;;AAzBR;AA2BH,CA7BD;AA+BA,eAAeO,KAAf","sourcesContent":["import {EventEmitter} from 'events';\nimport Dispatcher from '../appDispatcher';\nimport actionTypes from '../actions/actionTypes';\n\nconst CHANGE_EVENT = \"change\"; // noy global as only 1 thing is exported below\nlet _courses = [];\n\nclass CourseStore extends EventEmitter{\n\n addChangeListener(callback){\n     this.on(CHANGE_EVENT, callback);\n }\n\n removeChangeListener(callback){\n     this.removeListener(CHANGE_EVENT, callback);\n }\n\n emitChange() {\n     this.emit(CHANGE_EVENT);\n }\n\n getCourses() {\n     debugger;\n     return _courses;\n }\n\n getCourseBySlug(slug) {\n     return _courses.find(course => course.slug === slug)\n }\n}\n\nconst store = new CourseStore();\nDispatcher.register(action => {\n    debugger;\n    switch (action.actionType) {\n        case actionTypes.CREATE_COURSE:\n            _courses.push(action.course);\n            store.emitChange();\n            break;\n\n        case actionTypes.UPDATE_COURSE:\n            _courses = _courses.map(course =>\n                course.id === action.course.id ? action.course : course\n            );\n             store.emitChange();\n             break;\n\n        case actionTypes.LOAD_COURSES:\n             _courses = action.courses;\n             store.emitChange();\n             break;\n\n        case actionTypes.DELETE_COURSE:\n             _courses = _courses.filter( course => course.id === parseInt(action.id, 10)\n             );\n             store.emitChange();\n             break;\n             \n        default:\n            //nothing to do here\n    }\n});\n\nexport default store;"]},"metadata":{},"sourceType":"module"}